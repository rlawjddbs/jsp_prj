package day0104;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.TitledBorder;

/**
 * DAO 라고 함 data access object
 * @author owner
 */
public class RunUseStatementCRUD {

	private UseStatementCRUD us_crud;
	public RunUseStatementCRUD() {
		us_crud=new UseStatementCRUD();
	}
	
	
	
	
	
	
	
	//&& 특징이 전항이 true 면 후항을 계산안함
	public void addCpDept() {
		String tempData=JOptionPane.showInputDialog("부서정보추가 \n 입력 예 ) 부서번호,부서명,위치");
		if(tempData !=null && !tempData.equals("")) {
			String[] data=tempData.split(",");
			if(data.length !=3) {
				JOptionPane.showMessageDialog(null, "입력형식을 확인해 주세요");
				return;
			}
			int deptno=0;
			String dname="";
			String loc="";
			dname=data[1];
			loc=data[2];
			
			try {
				deptno=Integer.parseInt(data[0]);
			}catch(NumberFormatException nfe) {
				JOptionPane.showMessageDialog(null, "부서번호는 숫자입니다.");
				return;
			}
			//처리된 입력데이처를 VO 에 설정하고
			CpDeptVO cdvo=new CpDeptVO(deptno,dname,loc);
			//VO 의 값을 db에 insert 한다
			try {
				us_crud.insertCpDept(cdvo);// 추가 성공
				JOptionPane.showMessageDialog(null,deptno+ "번 부서정보 추가");
				
			} catch (SQLException se) {//예외
				String errMsg="";
				switch (se.getErrorCode()) {
				case 1: errMsg=deptno+"번 부서는 이미 존재합니다";
					break;
				case 1438:errMsg=dname+"부서 번호는 두자리입니다";
					break;
				case 12899:errMsg="부서명이나 위치가 너무 깁니다";
					break;

				default:errMsg="시스템 문제가 발생했습니다 잠시후 다시 시도 ";
					break;
				}
				JOptionPane.showMessageDialog(null, errMsg);
				se.printStackTrace();
			}
			
		}
		
		
		
	}//addcpdept
	public void modifyCpDept() {
		String tempData=JOptionPane.showInputDialog("부서정보변경 \n 부서번호에 일치하는 부서명과 위치를 변경합니다\n입력 예 ) 부서번호,부서명,위치");
		if(tempData !=null && !tempData.equals("")) {
			String[] data=tempData.split(",");
			if(data.length !=3) {
				JOptionPane.showMessageDialog(null, "입력형식을 확인해 주세요");
				return;
			}
			int deptno=0;
			String dname="";
			String loc="";
			dname=data[1];
			loc=data[2];
			
			try {
				deptno=Integer.parseInt(data[0]);
			}catch(NumberFormatException nfe) {
				JOptionPane.showMessageDialog(null, "부서번호는 숫자입니다.");
				return;
			}
			//처리된 입력데이처를 VO 에 설정하고
			CpDeptVO cdvo=new CpDeptVO(deptno,dname,loc);
			//VO 의 값을 db에 insert 한다
			String msg="";
			
			try {
				if(us_crud.updateCpDept(cdvo)) {// 변경된 레코드가 존재
					msg=deptno+"번 부서의 정보를 변경하엿습니다.";
					
					
				}// /변경된 레코드 존재하지 않음
				else {
					msg=deptno+"번 부서는 존재하지 않습니다";
				}
				JOptionPane.showMessageDialog(null,deptno+ "번 부서정보 추가");
				
			} catch (SQLException se) {//예외
				String errMsg="";
				switch (se.getErrorCode()) {
				case 12899:errMsg="부서명이나 위치가 너무 깁니다";
					break;

				default:errMsg="시스템 문제가 발생했습니다 잠시후 다시 시도 ";
					break;
				}
				JOptionPane.showMessageDialog(null, errMsg);
				se.printStackTrace();
			}
			
		}
		
		
		
	}//modify
	public void removeCpDept() {
		
		String inpuData=JOptionPane.showInputDialog("부서 삭제\n삭제할 부서번호를 입력해 주세요");
		if(inpuData !=null && !inpuData.equals("")) {
			int deptno=0;
			try {
				deptno=Integer.parseInt(inpuData);
				
			}catch(NumberFormatException nfe) {
				JOptionPane.showMessageDialog(null, "부서번호는 숫자이어야 합니다");
				return;
			}///try
			try {
				String msg=deptno+"번 부서는 존재하지 안습니다";
				if(us_crud.deleteCpDept(deptno)){
					msg=deptno+"번 부서 정보를 삭제하였습니다";
				}
				JOptionPane.showMessageDialog(null, msg);
			}
			catch(SQLException se) {
				JOptionPane.showMessageDialog(null, "죄송합니다 문제가 발생");
				se.printStackTrace();
			}
		
		
		
		
		}//if
		
		
		
		
		
		
		
		
		
	}//remove
	public void searchAllCpDept() {
		
		StringBuilder viewCpDept=new StringBuilder();
		viewCpDept.append("-------------------------------------------------------\n")
				  .append("번호 \t부서번호 \t부서명 \t위치\n")
				  .append("-------------------------------------------------------\n");
		int rowCount=0;
		try {
			List<CpDeptVO> list=us_crud.selectAllCpDept();
			CpDeptVO cdv=null;
			rowCount++;
			for(int i=0; i<list.size();i++) {
				cdv=list.get(i);
				viewCpDept.append(1+1).append("\t")
						  .append(cdv.getDeptno()).append("\t")
						  .append(cdv.getDname()).append("\t")
						  .append(cdv.getLoc()).append("\n");
						  
			}
			if(list.isEmpty()) {//list.size()==0   같음
			viewCpDept.append("입력된 부서정보가 존재하지 안습니다.\n");
			}
		} catch (SQLException e) {
			viewCpDept.append("DBMS 에서 문제가 발생했습니다 ㅈㅅ!\n");
			
			e.printStackTrace();
		}
		viewCpDept.append("-------------------------------------------------------\n")
				  .append("\t\t총").append(rowCount).append("개의 부서정보가 조화\n");
		JTextArea jta=new JTextArea(30,50);
		jta.setEditable(false);
		jta.setText(viewCpDept.toString());
		JScrollPane jsp=new JScrollPane(jta);
		
		jsp.setBorder(new TitledBorder("전체 부서 조회결과\n"));
		JOptionPane.showMessageDialog(null,jsp);
		
		
		
	}//search
	public void searchOneCpDept() {
		
		String inputData=JOptionPane.showInputDialog("부서조회\n조회할 부서번호를 입력해 주세요");
		if(inputData!=null && !inputData.equals("")) {
			try {
			
			int deptno=Integer.parseInt(inputData);
			}
			catch(NumberFormatException nfe) {
				JOptionPane.showMessageDialog(null, "부서번호는 정수 형태로 입력 하셔야 합니다");
				
			}
		}
		
		
		
		
	}//search
	
	
	
	public static void main(String[] args) {
		RunUseStatementCRUD rus_crud=new RunUseStatementCRUD();
		
		boolean exitFlag=false;
		String inputMenu="";
		
		do {
			inputMenu=JOptionPane.showInputDialog("메뉴선택\n1.부서추가2.부서변경.3.부서삭제.4전체부서조회5.특정부서조회6.종료");
			
			switch (inputMenu) {
			case "1":
				rus_crud.addCpDept();
				break;
			case "2":
				rus_crud.modifyCpDept();
				break;
			case "3":
				rus_crud.removeCpDept();
				break;
			case "4":
				rus_crud.searchAllCpDept();
				break;
			case "5":
				rus_crud.searchOneCpDept();
				break;
			case "6":
				exitFlag=true;
				break;

			default:JOptionPane.showMessageDialog(null,inputMenu+" 는 제공되는 서비스가 아닙니다");
				break;
			}
			
		}while(!exitFlag);
		JOptionPane.showMessageDialog(null, "사용해 주셔서 감사합니다");
	}

}
























package day0104;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * statement 객체를 사용하여 CRUD 를 구현하는 클래스 CRUD 는 create read update delete 의 약어
 * Create insert
 * 
 * @author owner
 */
public class UseStatementCRUD {

	/**
	 * VO 를 입력받아 VO 값을 cp_dept테이블에 추가
	 * 
	 * @param cdvo 부서번호 부서명 위치를 가진 VO
	 * @throws SQLException
	 */
	public void insertCpDept(CpDeptVO cdvo) throws SQLException {
		// 1드라이버 로드
		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Connection con = null;
		Statement stmt = null;
		try {
			// 2connection얻기
			String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
			String id = "scott";
			String passwd = "tiger";

			con = DriverManager.getConnection(url, id, passwd);
			// 3쿼리문 생성객체 얻기
			stmt = con.createStatement();
			// 4쿼리 수행후 결과 얻기
//			String insertCpdept="insert into cp_dept(deptno,dname,loc)values
//					+ ("+cdvo.getDeptno()+",'"+cdvo.getDname()+"','"+cdvo.getLoc()+"')";"
			StringBuilder insertCpDept = new StringBuilder();
			insertCpDept.append("insert into cp_dept(deptno,dname,loc)values(").append(cdvo.getDeptno()).append(",'")
					.append(cdvo.getDname()).append("','").append(cdvo.getLoc()).append("')");

			int cnt = stmt.executeUpdate(insertCpDept.toString());
			System.out.println(cnt);

		} finally {
			// 5연결 끊기
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		}

	}

	public boolean updateCpDept(CpDeptVO cdvo) throws SQLException {
		boolean flag = false;
		// 1 드라이버 로딩
		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Connection con = null;
		Statement stmt = null;
		try {
			// 2컨넥션 얻기
			String url = "jdbc:Oracle:thin:@127.0.0.1:1521:orcl";
			String id = "scott";
			String passwd = "tiger";
			con = DriverManager.getConnection(url, id, passwd);
			// 3처리문 생성객체 얻기
			stmt = con.createStatement();
			// 4쿼리문 수행후 결과 얻기
			StringBuilder updateCpDept = new StringBuilder();
			updateCpDept.append("update cp_dept set ").append("dname='").append(cdvo.getDname()).append("',")
					.append("loc='").append(cdvo.getLoc()).append("'").append("where deptno=").append(cdvo.getDeptno());

			int cnt = stmt.executeUpdate(updateCpDept.toString());
			// 테이블 구조상 부서번호는 pk이므로 한행만 변경된다.
			if (cnt != 0) {
				flag = true;
			}
		} finally {
			// 5연결 끊기
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}

		}

		return flag;

	}

	public boolean deleteCpDept(int deptno) throws SQLException {
		boolean flag = false;
		// 1 드라이버 로딩
		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Connection con = null;
		Statement stmt = null;
		try {
			// 2connection 얻기
			String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
			String id = "scott";
			String passwd = "tiger";
			con = DriverManager.getConnection(url, id, passwd);

			// 3쿼리문 생성 객체 얻기
			stmt = con.createStatement();
			// 4쿼리문 수행후 결과확인
			StringBuilder deleteCpDept = new StringBuilder();
			deleteCpDept.append("delete from cp_dept where deptno=").append("deptno");
			int cnt = stmt.executeUpdate(deleteCpDept.toString());
			if (cnt == 1) {
				flag = true;
			}

		} finally {
			// 5연결 끊기
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		}
		return flag;

	}

	public List<CpDeptVO> selectAllCpDept() throws SQLException {
		List<CpDeptVO> list = new ArrayList<CpDeptVO>();
		// 1드라이버 로딩
		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			// 2
			String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
			String id = "scott";
			String passwd = "tiger";
			con = DriverManager.getConnection(url, id, passwd);
			// 3
			stmt = con.createStatement();
			String selectCpDept = "select deptno,dname,loc from cp_dept";
			// 4
			rs = stmt.executeQuery(selectCpDept);
			CpDeptVO cdvo = null;
			while (rs.next()) {
//				System.out.println(rs.getInt(1)+","+rs.getString(2)+","+rs.getString(3));
				cdvo = new CpDeptVO(rs.getInt("deptno"), rs.getString("dname"), rs.getString("loc"));
				// 한줄만있으면 가장 마지막 값만 가져옴
				// 같은 이름으로 생성된cdvo 객체를 사라지지 않도록 관리하기위해 List에 추가
				list.add(cdvo);

			}
		} finally {// 5
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		}

		return list;
	}

	public OneCpDeptVO selectCpDept(int deptno) throws SQLException {
		OneCpDeptVO ocdvo = null;
		// 1드라이버로드

		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			// 2connection 얻기
			String url = "jdbc:oracle:thin:@127.0.0.1:1521:orcl";
			String id = "scott";
			String passwd = "tiger";
			con = DriverManager.getConnection(url, id, passwd);

			// 3쿼리 문 생성
			stmt = con.createStatement();

			// 4쿼리실행후 결과 확인
			StringBuilder selectCpDept = new StringBuilder();
			selectCpDept.append("select dname,loc from cp_dept where deptno=").append(deptno);
			rs = stmt.executeQuery(selectCpDept.toString());
			if (rs.next()) {
				ocdvo =new OneCpDeptVO(rs.getString("dname"),rs.getString("loc"));
			}
		} finally {
			// 5연결 끝
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		}

		return ocdvo;
	}

}





















